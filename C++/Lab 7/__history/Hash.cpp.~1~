//---------------------------------------------------------------------------

#pragma hdrstop

#include "Hash.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

Hash :: Hash(int size)
{
	stacks = new Stack*[size]
	for(int i = 0; i < size; i++)
	{
		stacks[i] = new Stack;
		stacks[i] = NULL:
	}
	this -> size = size;
}


int Hash :: CreateKey(int x)
{
	return x % size;
}


Stack* Hash :: GetStack(int key)
{
	return  stacks[key];
}


void Hash :: Add(int x)
{
	int number = CreateKey(x);
	Stack* temp = new Stack;
	temp = GetStack(number);
	temp = temp -> Add(temp, x);
	stacks[number] = temp;
}


void Hash :: Clear()
{
	for(int i = 0; i < size; i++)
	{
		stacks[i] -> Delete(&stacks[i]);
		size = 0;
	}

	delete[] stacks;
}


AnsiString Hash :: Find(int i)
{
	if(i < size)
	{
		AnsiString str = IntToStr(i) + ": ";
		Stack* temp = new Stack;
		temp = stacks[i];
		if(stacks[i] == NULL)
			return (str + "This one is empty");
		else
		{
			int count = 0;
			while(temp)
			{
				if(count  != 0)
					str += "->";
				count++;
				str += IntToStr(temp -> key);
				temp = temp -> next;
			}
			return str;
		}
	}
}


TStringList* Hash :: Show()
{
	TString *result = new TStringList;
	AnsiString str = "";
	for(int i = 0; i < size; i++)
	{
		str = IntToStr(i) + ": ";
		Stack* temp = new stack;
		temp = stacks[i];

		if(stacks[i] == NULL)
			result -> Add(str + "This one is empty");
		else
		{
			int count = 0;
			while(temp)
			{
				if(count != 0)
					str += "->";
				str += IntToStr(temp -> key);
				temp = temp -> next;
			}
			result -> Add(str);
		}
	}
    return result;
}